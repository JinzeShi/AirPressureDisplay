#ifndef __ILI9325_GUI_H
#define __ILI9325_GUI_H

#include <string.h>
#include <math.h>
#include "iLi9325.h"

#define LCD_RGB_RED                     0xF800
#define LCD_RGB_GREEN                   0x07E0
#define LCD_RGB_BLUE                    0x001F
#define LCD_RGB_YELLOW                  (LCD_RGB_RED    | LCD_RGB_GREEN)
#define LCD_RGB_CYAN                    (LCD_RGB_GREEN  | LCD_RGB_BLUE)
#define LCD_RGB_PURPLE                  (LCD_RGB_RED    | LCD_RGB_BLUE)
#define LCD_RGB_WHITE                   0xFFFF
#define LCD_RGB_BLACK                   0x0000

#define ILI9325_GUI_FORE                0
#define ILI9325_GUI_BACK                1
#define ILI9325_GUI_CHAR_MINUS          10
#define ILI9325_GUI_CHAR_DOT            11
#define ILI9325_GUI_CHAR_BLANK          12

#define ILI9325_GUI_Y_TEMP              86
#define ILI9325_GUI_Y_PRESS             122
#define ILI9325_GUI_Y_ASL               154

#define ILI9325_GUI_X_TEMP              40
#define ILI9325_GUI_X_PRESS             35
#define ILI9325_GUI_X_ASL               43
#define ILI9325_GUI_X_COLON             115

#define ILI9325_GUI_X_CHAR1             135
#define ILI9325_GUI_X_CHAR2             150
#define ILI9325_GUI_X_CHAR3             165
#define ILI9325_GUI_X_CHAR4             180
#define ILI9325_GUI_X_CHAR5             195
#define ILI9325_GUI_X_CHAR6             210
#define ILI9325_GUI_X_CHAR7             225
#define ILI9325_GUI_X_UNIT              245

void ili9325_GUI_Draw(double Temp, double Press, double Asl);
void ili9325_GUI_ChangeColor(uint8_t option);
void ili9325_GUI_Refresh(void);

void ili9325_GUI_DrawFramework(void);
void ili9325_GUI_DrawData(int32_t data, uint8_t offset, uint8_t decimalNum, uint8_t *pRRecord, uint16_t Ypos);
void ili9325_GUI_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pData, const uint32_t *pDataSize);
void ili9325_GUI_SetChar(uint8_t c);

static uint8_t ILI9325_GUI_FLAG_REFRESH = 1;

// reverse record
static uint8_t ILI9325_GUI_DATA_TEMP[6];
static uint8_t ILI9325_GUI_DATA_PRESS[7];
static uint8_t ILI9325_GUI_DATA_ASL[7];

static uint32_t ILI9325_GUI_COLOR_FORE_INDEX = 0;
static const uint32_t ILI9325_GUI_COLOR_FORE_SIZE = 8;
static const uint16_t ILI9325_GUI_COLOR_FORE_TABLE[] = {
        LCD_RGB_YELLOW, LCD_RGB_RED, LCD_RGB_GREEN, LCD_RGB_BLUE,
        LCD_RGB_CYAN, LCD_RGB_PURPLE, LCD_RGB_WHITE, LCD_RGB_BLACK
};
static uint32_t ILI9325_GUI_COLOR_BACK_INDEX = 0;
static const uint32_t ILI9325_GUI_COLOR_BACK_SIZE = 8;
static const uint16_t ILI9325_GUI_COLOR_BACK_TABLE[] = {
        LCD_RGB_BLACK, LCD_RGB_YELLOW, LCD_RGB_RED, LCD_RGB_GREEN,
        LCD_RGB_BLUE, LCD_RGB_CYAN, LCD_RGB_PURPLE, LCD_RGB_WHITE
};

static const uint32_t ILI9325_GUI_X_CHAR_TABLE_SIZE = 7;
static const uint32_t ILI9325_GUI_X_CHAR_TABLE[] = {
        ILI9325_GUI_X_CHAR1, ILI9325_GUI_X_CHAR2, ILI9325_GUI_X_CHAR3, ILI9325_GUI_X_CHAR4,
        ILI9325_GUI_X_CHAR5, ILI9325_GUI_X_CHAR6, ILI9325_GUI_X_CHAR7
};

static const uint32_t BITMAP_TEMP_SIZE[2] = {16, 8};
static const uint8_t BITMAP_TEMP[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0xc1, 0xff, 0x81, 0xf0, 0x3e, 0x07, 0xf0,
        0xdc, 0xc0, 0x71, 0x80, 0x78, 0x38, 0x03, 0xb8,
        0xdc, 0xc0, 0x70, 0x00, 0x78, 0x78, 0x03, 0x9c,
        0x1c, 0x00, 0x73, 0x00, 0x7c, 0x78, 0x03, 0x9c,
        0x1c, 0x00, 0x73, 0x00, 0x7c, 0xf8, 0x03, 0x9c,
        0x1c, 0x00, 0x7f, 0x00, 0x7e, 0xf8, 0x03, 0xbc,
        0x1c, 0x00, 0x73, 0x00, 0x6f, 0xf8, 0x03, 0xf8,
        0x1c, 0x00, 0x73, 0x00, 0x6f, 0xb8, 0x03, 0x80,
        0x1c, 0x00, 0x70, 0xc0, 0x67, 0xb8, 0x03, 0x80,
        0x1c, 0x00, 0x71, 0xc0, 0x67, 0xb8, 0x03, 0x80,
        0x3f, 0x01, 0xff, 0x81, 0xfb, 0x7e, 0x07, 0xc0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint32_t BITMAP_PRESS_SIZE[2] = {16, 10};
static const uint8_t BITMAP_PRESS[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xfe, 0x01, 0xff, 0x01, 0xff, 0x80, 0x7f, 0x00, 0x7f, 0x00,
        0x77, 0x00, 0x77, 0x80, 0x71, 0x80, 0x77, 0x00, 0x77, 0x00,
        0x73, 0x80, 0x73, 0x80, 0x70, 0x00, 0xe3, 0x00, 0xe3, 0x00,
        0x73, 0x80, 0x73, 0x80, 0x73, 0x00, 0xf0, 0x00, 0xf0, 0x00,
        0x73, 0x80, 0x77, 0x80, 0x73, 0x00, 0x78, 0x00, 0x78, 0x00,
        0x77, 0x80, 0x7e, 0x00, 0x7f, 0x00, 0x3e, 0x00, 0x3e, 0x00,
        0x7f, 0x00, 0x7e, 0x00, 0x73, 0x00, 0x0f, 0x00, 0x0f, 0x00,
        0x70, 0x00, 0x77, 0x00, 0x73, 0x00, 0xc7, 0x80, 0xc7, 0x80,
        0x70, 0x00, 0x77, 0x80, 0x70, 0xc0, 0xe3, 0x80, 0xe3, 0x80,
        0x70, 0x00, 0x73, 0xc0, 0x71, 0xc0, 0xf7, 0x00, 0xf7, 0x00,
        0xf8, 0x01, 0xf9, 0xf1, 0xff, 0x80, 0xfe, 0x00, 0xfe, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint32_t BITMAP_ASL_SIZE[2] = {16, 8};
static const uint8_t BITMAP_ASL[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0e, 0x00, 0x00, 0x7f, 0x00, 0x01, 0xfc, 0x00,
        0x0f, 0x00, 0x00, 0x77, 0x00, 0x00, 0x70, 0x00,
        0x1f, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x70, 0x00,
        0x1f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x70, 0x00,
        0x1b, 0x80, 0x00, 0x78, 0x00, 0x00, 0x70, 0x00,
        0x3b, 0x80, 0x00, 0x3e, 0x00, 0x00, 0x70, 0x00,
        0x33, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x70, 0x00,
        0x7f, 0xc0, 0x00, 0xc7, 0x80, 0x00, 0x70, 0x00,
        0x61, 0xc0, 0x00, 0xe3, 0x80, 0x00, 0x70, 0xc0,
        0xe0, 0xe0, 0x00, 0xf7, 0x00, 0x00, 0x71, 0x80,
        0xf3, 0xf0, 0x00, 0xfe, 0x00, 0x01, 0xff, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint32_t BITMAP_COLON_SIZE[2] = {16, 1};
static const uint8_t BITMAP_COLON[] = {
        0x00,
        0x00,
        0x00,
        0x00,
        0xc0,
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0xc0,
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00
};

static const uint32_t BITMAP_TEMPUNIT_SIZE[2] = {16, 3};
static const uint8_t BITMAP_TEMPUNIT[] = {
        0x00, 0x00, 0x00,
        0x78, 0x1f, 0xc0,
        0xec, 0x79, 0xc0,
        0xcc, 0x70, 0xc0,
        0xec, 0xe0, 0xe0,
        0x78, 0xe0, 0x00,
        0x00, 0xe0, 0x00,
        0x00, 0xe0, 0x00,
        0x00, 0xe0, 0x00,
        0x00, 0x70, 0xe0,
        0x00, 0x79, 0xc0,
        0x00, 0x1f, 0x80,
        0x00, 0x00, 0x00,
        0x00,  0x00, 0x00,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00
};

static const uint32_t BITMAP_PRESSUNIT_SIZE[2] = {16, 6};
static const uint8_t BITMAP_PRESSUNIT[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x70, 0x01, 0xfe, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x77, 0x00, 0x00, 0x00,
        0x70, 0x00, 0x73, 0x80, 0x00, 0x00,
        0x70, 0x00, 0x73, 0x80, 0x00, 0x00,
        0x77, 0x80, 0x73, 0x80, 0x7c, 0x00,
        0x76, 0x00, 0x77, 0x80, 0xee, 0x00,
        0x7c, 0x00, 0x7f, 0x00, 0x1e, 0x00,
        0x7c, 0x00, 0x70, 0x00, 0x7e, 0x00,
        0x7e, 0x00, 0x70, 0x00, 0xee, 0x00,
        0x77, 0x00, 0x70, 0x00, 0xee, 0x00,
        0xff, 0xc1, 0xf8, 0x00, 0xff, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint32_t BITMAP_ASLUNIT_SIZE[2] = {16, 2};
static const uint8_t BITMAP_ASLUNIT[] = {
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0xff, 0xf0,
        0xf7, 0xb8,
        0xe7, 0x38,
        0xe7, 0x38,
        0xe7, 0x38,
        0xe7, 0x38,
        0xe7, 0x38,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00
};

#define BITMAP_CHAR_TABLE_SIZE              13
#define BITMAP_CHAR_TABLE_INDEX_MINUS       ILI9325_GUI_CHAR_MINUS
#define BITMAP_CHAR_TABLE_INDEX_DOT         ILI9325_GUI_CHAR_DOT
#define BITMAP_CHAR_TABLE_INDEX_BLANK       ILI9325_GUI_CHAR_BLANK

static const uint32_t BITMAP_CHAR_SIZE[2] = {16, 1};
static uint8_t BITMAP_CHAR[16] = {};
static const uint8_t BITMAP_CHAR_TABLE[] = {
            // 0123456789-.(BLANK)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3c, 0x3c, 0x7c, 0x7c, 0x0e, 0x3e, 0x0f, 0x7f, 0x3c, 0x3c, 0x00, 0x00, 0x00,
        0x7e, 0x7c, 0xee, 0xee, 0x1e, 0x30, 0x3c, 0xc7, 0x76, 0x6e, 0x00, 0x00, 0x00,
        0xe7, 0x1c, 0xc6, 0xc6, 0x1e, 0x60, 0x70, 0xc6, 0xe7, 0xe7, 0x00, 0x00, 0x00,
        0xe7, 0x1c, 0x06, 0x0c, 0x3e, 0x78, 0x70, 0x0e, 0xf6, 0xe7, 0x00, 0x00, 0x00,
        0xe7, 0x1c, 0x06, 0x1c, 0x6e, 0x1c, 0xfe, 0x0e, 0x7e, 0xe7, 0x00, 0x00, 0x00,
        0xe7, 0x1c, 0x06, 0x3e, 0x6e, 0x0e, 0xff, 0x0c, 0x3c, 0xf7, 0x00, 0x00, 0x00,
        0xe7, 0x1c, 0x0c, 0x0e, 0xce, 0x06, 0xe7, 0x1c, 0x7e, 0x7f, 0xf8, 0x00, 0x00,
        0xe7, 0x1c, 0x18, 0x06, 0xff, 0x06, 0xe7, 0x1c, 0x67, 0x0e, 0xf8, 0x00, 0x00,
        0xe7, 0x1c, 0x30, 0x06, 0x0e, 0x06, 0xe7, 0x18, 0xe7, 0x0e, 0x00, 0x00, 0x00,
        0x7e, 0x1c, 0x63, 0x0e, 0x0e, 0x0e, 0x76, 0x18, 0xf7, 0x3c, 0x00, 0xc0, 0x00,
        0x3c, 0x7f, 0xff, 0xfc, 0x0e, 0xfc, 0x3c, 0x38, 0x7e, 0xf0, 0x00, 0xc0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#endif //__ILI9325_GUI_H
